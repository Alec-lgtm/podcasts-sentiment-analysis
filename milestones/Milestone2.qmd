

This is our plan for milestones on this project:

We were unable to complete the 2.5 week plan for milestone 1 because we were over-ambitious and planned to complete everything within 2.5 weeks. 

We are changing our analysis from finding differences in emotion in textual and spoken word to comparing differences in sentiment (emotion) between podcasts and articles.

We are doing this by taking podcast transcripts and comparing them to similar articles on the same topic (preferrably from the same media publisher)

We have downloaded all podcast transcripts from the year 2024 from the podcast Today Explained by Vox. We are looking for the best way to find articles that are related and published by vox that are associated with the article. Perhaps using the section that has links to more information in the podcast notes would work (this would ideally be part of the metadata from the RSS feed)

Regardless, implementing the naive-bayes text classification algorithm shouldn't be terrible. 

Our plan

- [ ] Conduct Sentiment Analysis on Vox Podcast Data
  - [ ] Download a training set of data that has category (positive, negative) attached to document ("very boring")
  - [ ] Loop over all the categories to find which category maximizes the probability of that category given an unknown document P(c|d)
  - [ ] Calculate P (c|d) based on P(d|c) * P(c)
    - [ ] Where P(d|c) is the multiplied conditional probability of each word given a category P(w|c) 
      - [ ] P(w|c) is the number of counts of that particular word in each document divided by the number of total word in each document
    - [ ] P(c) is the number of documents with that category divided by total number of documents
  - [ ] Generate a confusion matrix and F measure as evaluation metrics (don't worry about this part yet)
- [ ] Rinse and repeat for Vox articles



---

For The Group's Eyes Only

Todo:

- NYT, the daily
- Vox, Today Explained
- WSJ, The Journal
- Joe Rogan, Joe Rogan Experience

Tools
- Google App Script (for downloading files)
- NYT Subscription, {link}/Transcript = 1 <a href> thing within a certain html class
- Today Explained, docx files
- WSJ,  transcript button, within html <p> class

Vox is the easiest because we don't need webscrape anything in the podcast ie nyt and the journal

Maybe consider comparison between podcast text and article text.

What is the pain point here? What are we doing with the data? Sentiment Analysis.

Does the podcast have more positive / negative words than the articles?

Our updated plan: 
- grab vox data
- conduct number of each words in vox data
- conduct naive bayes classification algorithim
- profit

---

```{r}
sessionInfo()
```

